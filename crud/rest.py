"""
Simple REST API for CRUD operations, when identity is string representation of uuid, generated by
PyMotic and is part of model, which is single one and used both on database and network level.

Using PyMotic generated uuid as resource id is very convenient, and much much more easier then to rely
on Mongo's ObjectId, cause we avoid lot of headache with ObjectId serialization and conversions.

This is reference design of API to use with PyMotyc.

Keeping id Optional is not so elegant, but it allows us to have single model
for everything (input, output and database).

"""
import uuid
from typing import List

from fastapi import FastAPI, Query
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel
from pymongo.errors import DuplicateKeyError
from starlette.responses import JSONResponse
from starlette.testclient import TestClient

import pymotyc


# ----------------------------------------------------

class Employee(BaseModel):
    id: str = None  # UUID in str representation, will be generated by PyMotyc
    full_name: str
    age: int


# ----------------------------------------------------

engine = pymotyc.Engine()


@engine.database
class Warehouse:
    employees: pymotyc.Collection[Employee] = pymotyc.Collection(identity='id')


# ----------------------------------------------------

app = FastAPI(
    title='Warehouse',
    description='Simple Warehouse CRUD service for Employees, engine-managed identity.',
    version="0.1.0",
)


@app.on_event("startup")
async def init_app():
    motor = AsyncIOMotorClient("mongodb://127.0.0.1:27017")
    await engine.bind(motor=motor, inject_motyc_fields=True)
    await Warehouse.employees.collection.drop()
    await Warehouse.employees.create_indexes()


# ----------------------------------------------------

@app.exception_handler(pymotyc.errors.NotFound)
async def not_found(_request, exc):
    return JSONResponse({"detail": str(exc)}, status_code=404)


@app.exception_handler(DuplicateKeyError)
async def exists_or_constrain_violation(_request, exc):
    return JSONResponse({"detail": str(exc)}, status_code=400)


# ----------------------------------------------------

@app.post('/employees', response_model=Employee, status_code=201)
async def create_employee(employee: Employee) -> Employee:
    """ Creates employee in database. """

    return await Warehouse.employees.save(Employee(**employee.dict()))


@app.get('/employees', response_model=List[Employee])
async def list_employees() -> List[Employee]:
    """ Returns employees list from database ordered by name. """
    return await Warehouse.employees.find(sort={Employee.full_name: 1})


@app.get('/employees/{_id}', response_model=Employee)
async def get_employee(_id: str) -> Employee:
    """ Returns employee from database by it's id. """
    return await Warehouse.employees.find_one({Employee.id: _id})


@app.put('/employees/{_id}', response_model=Employee)
async def put_employee(_id: str, employee: Employee) -> Employee:
    """ Updates employee completely in database by given id, id itself can not be modified and should not be provided."""
    return await Warehouse.employees.save(Employee(id=_id, **employee.dict()), mode='update')


@app.patch('/employees/{_id}', response_model=Employee)
async def patch_employee(_id: str, inc_age: int = Query(1)) -> Employee:
    """ Increments employee's age by given id. """

    return await Warehouse.employees.update_one(
        {Employee.id: _id},
        update={'$inc': {Employee.age: inc_age}}
    )


@app.delete('/employees/{_id}', status_code=204)
async def delete_employee(_id: str):
    """ Delete employee with given login from database. """
    await Warehouse.employees.delete_one({Employee.id: _id})


if __name__ == "__main__":
    with TestClient(app) as cli:
        response = cli.post('/employees', json={'full_name': 'Vasya Pupkin', 'age': 42})
        assert response.status_code == 201
        vasya = response.json()
        vasya_id = vasya['id']
        assert uuid.UUID(vasya_id)  # Vasya's id is uuid generated by pymotyc.
        assert vasya == {'id': vasya_id, 'full_name': 'Vasya Pupkin', 'age': 42}

        response = cli.post('/employees', json={'full_name': 'Frosya Taburetkina', 'age': 20})
        assert response.status_code == 201
        frosya_id = response.json()['id']

        response = cli.get('/employees')
        assert response.status_code == 200
        assert response.json() == [
            {'id': frosya_id, 'full_name': 'Frosya Taburetkina', 'age': 20},
            {'id': vasya_id, 'full_name': 'Vasya Pupkin', 'age': 42}
        ]

        response = cli.get('/employees/' + vasya_id)
        assert response.status_code == 200
        assert response.json() == {'id': vasya_id, 'full_name': 'Vasya Pupkin', 'age': 42}

        response = cli.put('/employees/' + vasya_id, json={'full_name': 'Vasya Pupkin', 'age': 43})
        assert response.status_code == 200
        assert response.json() == {'id': vasya_id, 'full_name': 'Vasya Pupkin', 'age': 43}

        response = cli.get('/employees/' + vasya_id)
        assert response.status_code == 200
        assert response.json() == {'id': vasya_id, 'full_name': 'Vasya Pupkin', 'age': 43}

        response = cli.get('/employees/' + str(uuid.uuid4()))
        assert response.status_code == 404

        response = cli.put('/employees/' + str(uuid.uuid4()), json={'full_name': 'Dusya Ivanova', 'age': 22})
        assert response.status_code == 404

        response = cli.delete('/employees/' + frosya_id)
        assert response.status_code == 204

        response = cli.delete('/employees/' + frosya_id)
        assert response.status_code == 404

        response = cli.get('/employees')
        assert response.status_code == 200
        assert response.json() == [
            {'id': vasya_id, 'full_name': 'Vasya Pupkin', 'age': 43}
        ]

        response = cli.patch('/employees/' + vasya_id + '?inc_age=2')
        assert response.status_code == 200
        assert response.json() == {'id': vasya_id, 'full_name': 'Vasya Pupkin', 'age': 45}

        response = cli.patch('/employees/' + str(uuid.uuid4()) + '?inc_age=2')
        assert response.status_code == 404

        print('Everything fine!')
