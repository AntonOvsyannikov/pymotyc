""" Bit more advanced PyMotyc application.


Here some more advanced concepts are demonstrated:
    - declarative binding of the database to pymotyc.Engine instance with engine.database decorator
    - custom identity field, id will be generated by PyMotyc
    -
    - declaration of pydantic model, to be used to statically type MongoDB collection.
    - declaration of the database, with statically typed collection,
    - creation of AsyncIOMotorClient and pymotyc.Engine instances and binding all things together,
    - storing model instances into database,
    - retrieving single and multiple model instances from the collection by id or with query,
    - modifying model instance by saving or document in-place,
    - deleting document from the database.

For basic usage see app_quickstart.py, here only advanced concepts will be commented.

Here we have employee_id field in the model to represent identity. It is of type str and contains UUID
in str representation, which will be generated by PyMotyc while saving model instance with empty identity.
Identity generation callable can be provided for collection, if default is not applicable.
"""
import asyncio
import uuid

from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel

import pymotyc

from pymotyc import M


class Employee(BaseModel):
    employee_id: str = None  # UUID in str representation used as identity, will be generated by PyMotyc while saving
    name: str
    age: int


# Create PyMotyc engine instance.
engine = pymotyc.Engine()


# Decorate database @engine.database to put under control of PyMotyc engine.
@engine.database
class Warehouse:
    employees: pymotyc.Collection[Employee] = pymotyc.Collection(identity='employee_id')


async def main():
    motor = AsyncIOMotorClient("mongodb://127.0.0.1:27017")

    # Bind previously created PyMotyc Engine instance to the Motor instance.
    # Note we use inject_motyc_fields=True to use advanced Motyc queries,
    # where model's fields themselves, instead of field names, can be used as keys
    # for mongo find, sort or update queries, as well as in query builder.
    await engine.bind(motor=motor, inject_motyc_fields=True)

    # For custom identity unique index is created, so we have to recreate it after collection drop.
    await Warehouse.employees.collection.drop()
    await Warehouse.employees.create_indexes()

    # ===== Use statically typed collections! =====

    # Let's add first Employee to collection.
    vasya = await Warehouse.employees.save(Employee(name='Vasya Pupkin', age=42))

    assert isinstance(vasya, Employee)

    vasya_id = vasya.employee_id
    assert uuid.UUID(vasya_id)  # vasya's identity is generated by PyMotyc and it is UUID in str representation

    # Let's add some more Employees.
    frosya = await Warehouse.employees.save(Employee(name='Frosya Taburetkina', age=22))
    frosya_id = frosya.employee_id

    dusya = await Warehouse.employees.save(Employee(name='Dusya Ivanova', age=20))
    dusya_id = dusya.employee_id

    # Let's explore our collection now...

    # ...as a whole, please note we use advanced Motyc query for sort operation...
    employees = await Warehouse.employees.find(sort={Employee.age: 1})
    assert employees == [
        Employee(employee_id=dusya_id, name='Dusya Ivanova', age=20),
        Employee(employee_id=frosya_id, name='Frosya Taburetkina', age=22),
        Employee(employee_id=vasya_id, name='Vasya Pupkin', age=42)
    ]

    # ...or with query, please note we use Motyc query builder for simple operations.
    # The helper M is just used to statically cast model field to MotycField
    # (which are actually injected thanks to inject_motyc_fields=True option)
    employees = await Warehouse.employees.find((M(Employee.age) > 40) & M(Employee.name).regex('Vasya'))
    assert employees == [Employee(employee_id=vasya_id, name='Vasya Pupkin', age=42)]

    # Let's get back our first Employee by it's identity.
    # Note: identity should be provided in search query.
    vasya = await Warehouse.employees.find_one({Employee.employee_id: vasya_id})
    assert vasya.name == 'Vasya Pupkin'
    assert vasya.age == 42

    # Modify and save model instance (see app_quickstart.py for concurrency issue comments).
    vasya.age += 1
    vasya = await Warehouse.employees.save(vasya)
    assert vasya.age == 43

    # Or modify in-place.
    # Note: query builder for update operations is not available (yet?)
    vasya = await Warehouse.employees.update_one({Employee.employee_id: vasya_id}, update={'$inc': {Employee.age: 1}})
    assert vasya.age == 44

    # Finally let's remove someone from collection.
    await Warehouse.employees.delete_one({Employee.employee_id: vasya_id})

    # And check if is it done.
    employees = await Warehouse.employees.find(sort={Employee.age: 1})
    assert employees == [
        Employee(employee_id=dusya_id, name='Dusya Ivanova', age=20),
        Employee(employee_id=frosya_id, name='Frosya Taburetkina', age=22),
    ]

    print("Everything fine!")


if __name__ == "__main__":
    asyncio.run(main())
